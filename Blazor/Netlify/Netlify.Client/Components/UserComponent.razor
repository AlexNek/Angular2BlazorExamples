@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager

<FluentProfileMenu FullName="@_name"
                   Status="@_status"
                   @* StatusSize="PresenceBadgeSize.Small" *@
                   StatusTitle="@_statusTitle"
                   EMail="@_email"
                   Image="@(new Icons.Regular.Size48.Person().ToDataUri(size: "20px", color: "white"))"
                   ImageSize="30px"
                   @* TextPosition="TextPosition.Start" *@
                   @* OnClick="()=>OnClick()" *@
                   OnHeaderButtonClick="() => OnLogout()">
    <StartTemplate>
        @_name
    </StartTemplate>
    <HeaderTemplate>
        <FluentStack>
            <FluentSpacer />
            @if (_isAuthenticated)
            {
                <FluentButton OnClick="() => OnLogout()">Logout</FluentButton>
            }
            else
            {
                <CultureSelector />
                <FluentButton OnClick="() => OnLogin()">Login</FluentButton>
                <FluentButton OnClick="() => OnRegister()">Register</FluentButton>
            }
        </FluentStack>
    </HeaderTemplate>
    <ChildContent>
        <div style="width: 250px; height: 80px">
            <FluentLabel Typo="@Typography.Header" Style="font-weight: bold;">@_name</FluentLabel>
            <FluentLabel>@_email</FluentLabel>
        </div>
    </ChildContent>
    <FooterTemplate>
        <FluentStack>
            <FluentSpacer />
            @if (_isAuthenticated)
            {
                    <FluentAnchor Appearance="@Appearance.Hypertext"
                                  
                                  Href="/view-account">My Account</FluentAnchor>
            }
        </FluentStack>
    </FooterTemplate>
</FluentProfileMenu>

@code {
    private string? _locale;
    private string? _name;

    private string _statusTitle;

    PresenceStatus _status = PresenceStatus.Offline;

    private string? _email;

    private bool _isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _name = "Anonymous";
        _status = PresenceStatus.Offline;
        if (user.Identity is { IsAuthenticated: true })
        {
            _locale = user.FindFirst(ClaimTypes.Locality)?.Value;
            _email = user.FindFirst(ClaimTypes.Email)?.Value;
            _name = user.Identity.Name;
            _status = PresenceStatus.Available;
            _isAuthenticated = true;
        }

        UpdateStatusTitle();
    }

    private void UpdateStatusTitle()
    {
        _statusTitle = $"User {_name} is {_status}";
    }

    private void OnLogin()
    {
        NavManager.NavigateTo("auth/log-in");
    }

    private void OnLogout()
    {
        NavManager.NavigateTo("auth/logout", true);
    }

    private void OnRegister()
    {
        NavManager.NavigateTo("auth/register");
    }
}
