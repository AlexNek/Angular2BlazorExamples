@using System.Security.Claims
@using Netlifly.Shared
@using Netlify.Client.Components
@inherits LayoutComponentBase

@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<FluentLayout>
    <FluentHeader>
        Netlify
        <FluentSpacer />
        @* <CultureSelector Label="Select your locale:" IconColor="Color.Fill" @rendermode="InteractiveAuto" /> *@
        <UserComponent @rendermode="InteractiveAuto"></UserComponent>
    </FluentHeader>
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <NavMenu />
        <FluentBodyContent Class="body-content">
            <div class="content">
                @Body
            </div>
        </FluentBodyContent>
    </FluentStack>
    <FluentFooter>
        <a href="https://github.com/AlexNek/Angular2BlazorExamples" target="_blank">© 2024 Angular to Blazor Example App</a>
        <FluentSpacer />
        <a href="https://github.com/Ismaestro/angular-example-app" target="_blank">How it Works (Angular)</a>
    </FluentFooter>
    <FluentToastProvider MaxToastCount="10" RemoveToastsOnNavigation="false" @rendermode="InteractiveAuto"/>
</FluentLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code
{
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    [Inject]
    private ServerState ServerState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var user = HttpContext.User;
        if (user.Identity is { IsAuthenticated: true })
        {
            var localUser = new User();
            localUser.Id = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            localUser.Email = user.FindFirst(ClaimTypes.Email)?.Value;
            localUser.FirstName = user.Identity.Name;
            ServerState.SetUser(localUser);
        }

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

}
