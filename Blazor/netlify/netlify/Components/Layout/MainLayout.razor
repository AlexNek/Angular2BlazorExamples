@using Netlify.Client.Components
@inherits LayoutComponentBase

@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<FluentLayout>
    <FluentHeader>
        Netlify
        <FluentSpacer />
        @* <CultureSelector Label="Select your locale:" IconColor="Color.Fill" @rendermode="InteractiveAuto" /> *@
        <UserComponent @rendermode="InteractiveAuto"></UserComponent>
    </FluentHeader>
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <NavMenu />
        <FluentBodyContent Class="body-content">
            <div class="content">
                @Body
            </div>
        </FluentBodyContent>
    </FluentStack>
    <FluentFooter>
        <a href="https://www.fluentui-blazor.net" target="_blank">Documentation and demos</a>
        <FluentSpacer />
        <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor" target="_blank">About Blazor</a>


    </FluentFooter>
</FluentLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code
{
    // [CascadingParameter]
    // public HttpContext? HttpContext { get; set; }
    /// <summary>
    /// Method invoked when the component is ready to start, having received its
    /// initial parameters from its parent in the render tree.
    /// Override this method if you will perform an asynchronous operation and
    /// want the component to refresh when that operation is completed.
    /// </summary>
    /// <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.</returns>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();


        // var httpContext = HttpContextAccessor.HttpContext;
        // var requestCookie = HttpContext?.Request.Cookies[CookieRequestCultureProvider.DefaultCookieName];
        // if (requestCookie != null)
        // {
        //     var cultureResult = CookieRequestCultureProvider.ParseCookieValue(requestCookie);
        //     if (cultureResult != null && cultureResult.Cultures.Any())
        //     {
        //         var currentCulture = cultureResult.Cultures[0];
        //         CultureInfo cultureInfo = new CultureInfo(currentCulture.ToString());
        //         CultureInfo.CurrentCulture = cultureInfo;
        //         CultureInfo.CurrentUICulture = cultureInfo;
        //     }
        // }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var cultureResult = await LocalStorage.GetItemAsStringAsync("BlazorCulture");
        }
    }

}
