@page "/weather"
@attribute [StreamRendering]
@inject NavigationManager NavManager
<PageTitle>Weather</PageTitle>
<h1>Weather</h1>
<p>This component demonstrates showing data.</p>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (loadFailed)
{
    <p><em>Failed to load weather data. Please try again later.</em></p>
}
else
{
    <div id="grid-container">
        <!-- Load the grid component separately after initial render -->
        <WeatherGrid  Forecasts="forecasts" @rendermode="InteractiveServer" />
    </div>
}

@code {
    private IQueryable<WeatherForecast>? forecasts;
    private bool isLoading = true;
    private bool loadFailed = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("Starting OnInitializedAsync");
            await Task.Delay(500); // Simulate async work
            var startDate = DateOnly.FromDateTime(DateTime.Now);
            var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
            forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
                {
                    Date = startDate.AddDays(index),
                    TemperatureC = Random.Shared.Next(-20, 55),
                    Summary = summaries[Random.Shared.Next(summaries.Length)]
                }).AsQueryable();
            Console.WriteLine($"Forecasts loaded: {forecasts.Count()}");
        }
        catch (Exception ex)
        {
            loadFailed = true;
            Console.WriteLine($"Error loading forecasts: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}