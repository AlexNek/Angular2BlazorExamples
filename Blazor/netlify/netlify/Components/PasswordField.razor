@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@rendermode InteractiveServer

<FluentTextField TextFieldType="@(_isOpen ?TextFieldType.Text :TextFieldType.Password)"
                 Id="@Id"
                 Name="@Name"
                 Value="@Value"
                 AutoComplete="@AutoComplete"
                 Required="true"
                 Placeholder="@Placeholder"
                 Label="@Label"
                 ValueChanged="@OnValueChanged"
                 Style="@Style">
    <FluentIcon Value="@(@_isOpen ?_eyeOn:_eyeOff)" Color="@Color.Neutral" Slot="end" @onclick="()=>OnPasswordVisibility()" />
    @if (StartIcon != null)
    {
        <FluentIcon Value="@StartIcon" Slot="start" />
    }
</FluentTextField>

@code {
    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public virtual string? Value { get; set; }

    /// <summary>
    /// Gets or sets a callback that updates the bound value.
    /// </summary>
    [Parameter]
    public EventCallback<string?> ValueChanged { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? Name { get; set; }

    [Parameter]
    public string? AutoComplete { get; set; }

    [Parameter]
    public virtual string? Style { get; set; } = null;

    /// <summary>
    /// Gets or sets the short hint displayed in the input before the user enters a value.
    /// </summary>
    [Parameter]
    public virtual string? Placeholder { get; set; }
    
    [Parameter]
    public Icon? StartIcon { get; set; }

    private static readonly Icon _eyeOff = new Size20.EyeOff();
    private static readonly Icon _eyeOn = new Size20.Eye();

    private bool _isOpen = false;


    private async Task OnPasswordVisibility()
    {
        _isOpen = !_isOpen;
        //return await Task.CompletedTask;
    }

    private async Task OnValueChanged(string text)
    {
        Value = text;
        if (ValueChanged.HasDelegate)
        {
            await ValueChanged.InvokeAsync(text);
        }
    }

}
